generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Student
  Professor
}

model ElectiveGroup {
  id            String   @id @default(cuid())
  courses       Course[] @relation()
  Program       Program? @relation(fields: [programId], references: [id])
  programId     String?
  selectionRule String // filter for courses which are not explicitly added
}

model GeneralEducationGroup {
  id        String   @id @default(cuid())
  Program   Program? @relation(fields: [programId], references: [id])
  programId String?
}

model Program {
  id                     String                  @id @default(cuid())
  name                   String
  foundationalCourses    Course[]                @relation()
  electiveGroups         ElectiveGroup[]         @relation()
  generalEducationGroups GeneralEducationGroup[] @relation()
}

model Enrollment {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime @default(now())
}

model User {
  id              String       @id @default(cuid())
  username        String       @unique
  password        String
  name            String?
  email           String       @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole
  taughtCourses   Course[]     @relation("TaughtBy")
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  enrolledCourses Enrollment[]
}

model Course {
  id               String         @id @default(cuid())
  codeName         String
  name             String
  description      String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  taughtBy         User           @relation("TaughtBy", fields: [taughtById], references: [id])
  taughtById       String
  organization     Organization   @relation(fields: [organizationId], references: [id])
  organizationId   String
  enrolledStudents Enrollment[]
  Program          Program?       @relation(fields: [programId], references: [id])
  programId        String?
  ElectiveGroup    ElectiveGroup? @relation(fields: [electiveGroupId], references: [id])
  electiveGroupId  String?

  @@unique([codeName, organizationId])
}

model Organization {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String
  Course    Course[]
  User      User[]
}
