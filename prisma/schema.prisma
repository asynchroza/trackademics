generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  Student
  Professor
}

model FoundationalCourses {
  id       Int       @id @default(autoincrement())
  courses  Course[]
  programs Program[]
}

model CourseSelectionRule {
  id              String         @id @default(cuid())
  name            String
  regex           String
  ElectiveGroup   ElectiveGroup? @relation(fields: [electiveGroupId], references: [id])
  electiveGroupId String?
}

model SelectedElectiveCourse {
  id                      String         @id @default(cuid())
  course                  Course         @relation(fields: [codeName, organizationId], references: [codeName, organizationId])
  requiredElectiveGroup   ElectiveGroup? @relation("RequiredCourse", fields: [requiredElectiveGroupId], references: [id])
  requiredElectiveGroupId String?
  electiveGroup           ElectiveGroup? @relation("ElectiveCourse", fields: [electiveGroupId], references: [id])
  electiveGroupId         String?
  codeName                String
  organizationId          String
}

model ElectiveGroup {
  id              String                   @id @default(cuid())
  name            String                   @unique
  requiredCredits Int
  requiredCourses SelectedElectiveCourse[] @relation("RequiredCourse")
  electiveCourses SelectedElectiveCourse[] @relation("ElectiveCourse")
  rules           CourseSelectionRule[]
  program         Program[]                @relation()
}

model Program {
  id                    String              @id @default(cuid())
  name                  String
  requiredCredits       Int
  foundationalCourses   FoundationalCourses @relation(fields: [foundationalCoursesId], references: [id])
  electiveGroups        ElectiveGroup[]     @relation()
  Organization          Organization        @relation(fields: [organizationId], references: [id])
  organizationId        String
  foundationalCoursesId Int
  Course                Course[]

  @@unique([name, organizationId])
}

model Enrollment {
  id        String   @id @default(cuid())
  course    Course   @relation(fields: [courseId], references: [id])
  courseId  String
  student   User     @relation(fields: [studentId], references: [id])
  studentId String
  createdAt DateTime @default(now())
}

model User {
  id              String       @id @default(cuid())
  username        String       @unique
  password        String
  name            String?
  email           String       @unique
  emailVerified   DateTime?
  image           String?
  role            UserRole
  taughtCourses   Course[]     @relation("TaughtBy")
  organization    Organization @relation(fields: [organizationId], references: [id])
  organizationId  String
  enrolledCourses Enrollment[]
}

model Course {
  id                  String                   @id @default(cuid())
  codeName            String
  name                String
  description         String
  credits             Int
  createdAt           DateTime                 @default(now())
  updatedAt           DateTime                 @updatedAt
  taughtBy            User                     @relation("TaughtBy", fields: [taughtById], references: [id])
  taughtById          String
  organization        Organization             @relation(fields: [organizationId], references: [id])
  organizationId      String
  enrolledStudents    Enrollment[]
  program             Program?                 @relation(fields: [programId], references: [id])
  programId           String?
  courseElectives     SelectedElectiveCourse[]
  foundationalCourses FoundationalCourses[]

  @@unique([codeName, organizationId])
}

model Organization {
  id        String    @id
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  image     String
  Course    Course[]
  User      User[]
  programs  Program[]
}
